// Copyright 2019 The Google Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cloudrobotics.registry.v1alpha1;

option go_package = "src/proto/registry";

option java_multiple_files = true;
option java_package = "com.cloudrobotics.registry.v1alpha1";
option java_outer_classname = "RegistryProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cloud Robotics Registry gRPC API";
    description:
      "The registry is a core robot-agnostic API to organize common components "
      "in a cloud robotics installation.";
    version: "v1alpha1";
    contact: {
      email: "cloud-robotics-discuss@googlegroups.com";
      url: "https://www.cloudrobotics.com";
    };
    license: {
      name: "Apache 2.0";
      url: "http://www.apache.org/licenses/LICENSE-2.0.html";
    };
  };
};

/* Information about the robot model.
 *
 * RobotType contains shared information about a specific robot model.
 */
message RobotTypeSpec {
  // Manufacturer name of the robot.
  // Output only
  string make = 1;

  // Model name of the robot.
  // Output only
  string model = 2;

  // TODO(ensonic): consider more details, such as icons, urdf, ...
}

message RobotTypeStatus {
  // Roles aren't actuated.
}

enum InstallationTarget {
  UNKNOWN = 0;
  ROBOT = 1;
  CLOUD_PER_ROBOT = 2;
  CLOUD = 3;
}

message AppBinding {
  // References an App object with the given name in the same namespace.
  string app = 1;
  // DEPRECATED. Use values instead.
  map<string, string> settings = 2;
  // A YAML string that is merged into the apps' values.yaml.
  string values = 3;
}

// A Role binds Apps to Robot instances. It is typically written by the
// integrator when building a setup.
message RoleSpec {
  // HACK: The display name is a stand-in for real selector support until we
  // add label support to robots and the UI. Multiple roles may have the same
  // display name, and all roles with matching display names apply to a robot
  // with the same display name.
  string display_name = 1;
  repeated AppBinding apps = 2;
}

message RoleStatus {
  // Roles aren't actuated.
}

message HelmChart {
  string name = 1;
  string version = 2;
  InstallationTarget installation_target = 3;
  // A YAML string that is merged into the apps' values.yaml.
  string values = 5;
  // The chart tarball. This is optional: If unset, the master will try to
  // download the chart based on name+version.
  bytes inline_chart = 6;
}

message AppSpec {
  repeated HelmChart charts = 1;
}

message AppStatus {
  // Apps aren't actuated.
}

message RobotSpec {
  string type = 1;
  string role = 2;
}

enum InstallStatus {
  // Initial state.
  PENDING = 0;
  // All resources have been created.
  READY = 1;
  // Some resources could not be created.
  FAILED = 2;
}

enum RobotState {
  // Default value
  UNDEFINED = 0;

  // Reachable via network but not available due to
  // booting, paused or shutting down. Note that unavailability due to
  // activated emergency stop results in state EMERGENCY_STOP.
  UNAVAILABLE = 1;

  // Available for mission execution or in the process of executing missions.
  // Note that charging is a mission action which keeps the robot in state AVAILABLE.
  AVAILABLE = 2;

  // Triggered by pressing the emergency button *and/or* collision events.
  EMERGENCY_STOP = 3;

  // Unrecoverable error.
  ERROR = 4;
}


message RobotStatusCloud {
  // TODO(b/113095470): make the cloud-master write to this
  InstallStatus install_status = 1;
}

message RobotConfiguration {
  bool trolley_attached = 1;
}

message RobotStatusRobot {
  InstallStatus install_status = 1;

  google.protobuf.Timestamp update_time = 2;
  RobotState state = 3;
  google.protobuf.Timestamp last_state_change_time = 4;
  float battery_percentage = 5;

  bool emergencyStopButtonPressed = 6;
}

message RobotStatus {
  RobotStatusCloud cloud = 1;
  RobotStatusRobot robot = 2;
  RobotConfiguration configuration = 3;
}
