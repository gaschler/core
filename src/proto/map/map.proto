// Copyright 2019 The Google Cloud Robotics Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package cloudrobotics.map.v1alpha1;

option go_package = "src/proto/map";

option java_multiple_files = true;
option java_package = "com.cloudrobotics.map.v1alpha1";
option java_outer_classname = "MapProto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "src/proto/common/transform.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Cloud Robotics Map gRPC API";
    description:
      "The map API handles handles the creation and administration of maps"
      "composed of a set of map layers.";
    version: "v1alpha1";
    contact: {
      email: "cloud-robotics-discuss@googlegroups.com",
      url: "https://www.cloudrobotics.com"
    };
    license: {
      name: "Apache 2.0";
      url: "http://www.apache.org/licenses/LICENSE-2.0.html";
    };
  };
};

/* Cloud robotics API for map management.
 *
 * The map API handles handles the creation and administration of maps composed
 * of a set of map layers.
 *
 * Currently this API supports 3 types of layers:
 * - occupancy grid layers
 * - POI layers
 * - zone layers
 */
service MapService {
  // Creates a new, empty map.
  rpc CreateMap(Map) returns (Map) {
    option (google.api.http) = {
      post: "/apis/core.map/v1alpha1/maps"
      body: "*"
    };
  }

  // Retrieves a map.
  rpc GetMap(GetMapRequest) returns (Map) {
    option (google.api.http).get = "/apis/core.map/v1alpha1/maps/{map_id}";
  }

  // Lists all stored maps.
  rpc ListMaps(google.protobuf.Empty) returns (ListMapsResponse) {
    option (google.api.http).get = "/apis/core.map/v1alpha1/maps";
  }

  // Deletes a map from the system.
  rpc DeleteMap(DeleteMapRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete = "/apis/core.map/v1alpha1/maps/{map_id}";
  }

  // Creates a new layer for a map.
  rpc CreateLayer(Layer) returns (Layer) {
    option (google.api.http) = {
      post: "/apis/core.map/v1alpha1/maps/{map_id}/layers"
      body: "*"
    };
  }

  // Retrieves a layer of a map.
  rpc GetLayer(GetLayerRequest) returns (Layer) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}";
  }

  // Lists all layers of a map.
  rpc ListLayers(ListLayersRequest) returns (ListLayersResponse) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers";
  }

  // Deletes a layer from the system.
  rpc DeleteLayer(DeleteLayerRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}";
  }

  // Creates new POI.
  rpc CreatePoint(Point) returns (Point) {
    option (google.api.http) = {
      post: "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/points"
      body: "*"
    };
  }

  // Retrieves a point from a layer of a map.
  rpc GetPoint(GetPointRequest) returns (Point) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/points/{point_id}";
  }

  // List the points in a layer.
  rpc ListPoints(ListPointsRequest) returns (ListPointsResponse) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/points";
  }

  // Deletes a point from a layer.
  rpc DeletePoint(Point) returns (google.protobuf.Empty) {
    option (google.api.http).delete =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/points/{point_id}";
  }

  // Creates a new zone.
  rpc CreateZone(Zone) returns (Zone) {
    option (google.api.http) = {
      post: "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/zones"
      body: "*"
    };
  }

  // List the zones in a layer.
  rpc ListZones(ListZonesRequest) returns (ListZonesResponse) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/zones";
  }

  // Deletes a zone from a layer.
  rpc DeleteZone(DeleteZoneRequest) returns (google.protobuf.Empty) {
    option (google.api.http).delete =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/zones/{zone_id}";
  }

  // Creates a new occupancy layer.
  rpc CreateOccupancyGrid(OccupancyGrid) returns (OccupancyGrid) {
    option (google.api.http) = {
      post: "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/occupancygrid"
      body: "*"
    };
  }

  rpc GetOccupancyGrid(GetOccupancyGridRequest) returns (OccupancyGrid) {
    option (google.api.http).get =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/occupancygrid";
  }

  rpc DeleteOccupancyGrid(OccupancyGrid) returns (google.protobuf.Empty) {
    option (google.api.http).delete =
      "/apis/core.map/v1alpha1/maps/{map_id}/layers/{layer_id}/occupancygrid";
  }
}

// A map instance.
message Map {
  // ID of the map assigned when created.
  // Output only
  uint64 map_id = 1;

  // Creation timestamp.
  // Output only
  google.protobuf.Timestamp create_time = 2;

  // User-supplied, human-readable name for the map.
  string display_name = 3;
}

// A map layer instance.
message Layer {
  // ID of the map to add the layer to.
  uint64 map_id = 1;

  // ID of the layer assigned when created.
  // Output only
  uint64 layer_id = 2;

  // Creation timestamp.
  // Output only
  google.protobuf.Timestamp create_time = 3;

  // User-supplied, human-readable name for the map.
  string display_name = 4;

  // Determines the type of children this layer can have.
  enum LayerType {
    UNKNOWN = 0;
    OCCUPANCY_GRID_LAYER = 1;
    POINT_LAYER = 2;
    ZONE_LAYER = 3;
  }
  LayerType type = 5;
}

// Map data to be used with Robots.
message OccupancyGrid {
  // ID of the map to retrieve the occupancy grid from.
  uint64 map_id = 1;

  // ID of the occupancy grid layer.
  uint64 layer_id = 2;

  // Storage path of the pbstream file.
  string pbstream_url = 3;

  // Storage path of the rendered image file.
  string image_url = 4;

  // Size of an image pixel in meters.
  // Image needs to be scaled by the factor before drawing in global map.
  double image_pixel_length = 5;

  // Transform from image (meters, not pixel) coordinates to global map coordinates.
  cloudrobotics.common.v1alpha1.Rigid2d image_to_map = 6;

  // TODO(ensonic): add 'robot_type_id' to capture which kind of robots can use
  // this data
}

// Labeled places on a map, like a docking station or a shelf location.
message Point {
  // ID of the map the point belongs to.
  uint64 map_id = 1;

  // ID of the layer the point belongs to.
  uint64 layer_id = 2;

  // Output only.
  uint64 point_id = 3;

  // Creation timestamp.
  // Output only
  google.protobuf.Timestamp create_time = 4;

  // User-supplied, human-readable name for the point.
  string display_name = 5;

  // Pose of the point.
  cloudrobotics.common.v1alpha1.Rigid2d point_pose = 6;
}

// Labeled regions on a map, like a no-go-area.
message Zone {
  // ID of the map the zone belongs to.
  uint64 map_id = 1;

  // ID of the layer the zone belongs to.
  uint64 layer_id = 2;

  // Output only.
  uint64 zone_id = 3;

  // Creation timestamp.
  // Output only
  google.protobuf.Timestamp create_time = 4;

  // User-supplied, human-readable name for the zone.
  string display_name = 5;

  // List of vertices for the zone polygon.
  repeated cloudrobotics.common.v1alpha1.Vector2d vertices = 6;
}

message GetMapRequest {
  // ID of the map to be retrieved.
  uint64 map_id = 1;
}

message ListMapsResponse {
  repeated Map maps = 1;
}

message DeleteMapRequest {
  // ID of the map to be deleted.
  uint64 map_id = 1;
}

message GetLayerRequest {
  // ID of the map to retrieve the layer from.
  uint64 map_id = 1;

  // ID of the layer to retrieve.
  uint64 layer_id = 2;
}

message ListLayersRequest {
  // ID of the map to list the layers for.
  uint64 map_id = 1;
}

message ListLayersResponse {
  repeated Layer layers = 1;
}

message DeleteLayerRequest {
  // ID of the map to delete the layer from.
  uint64 map_id = 1;

  // ID of the layer to delete.
  uint64 layer_id = 2;
}

message GetPointRequest {
  // ID of the map to retrieve the layer from.
  uint64 map_id = 1;

  // ID of the layer to retrieve.
  uint64 layer_id = 2;

  // ID of the point to retrieve.
  uint64 point_id = 3;
}

message ListPointsRequest {
  // ID of the map to list the points from.
  uint64 map_id = 1;

  // ID of the layer to list the points form.
  uint64 layer_id = 2;
}

message ListPointsResponse {
  repeated Point points = 1;
}

message ListZonesRequest {
  // ID of the map to list the zone from.
  uint64 map_id = 1;

  // ID of the layer to list the zones from.
  uint64 layer_id = 2;
}

message ListZonesResponse {
  repeated Zone zones = 1;
}

message DeleteZoneRequest {
  // ID of the map to delete the zone from.
  uint64 map_id = 1;

  // ID of the layer to delete the zone from.
  uint64 layer_id = 2;

  // ID of the zone to delete.
  uint64 zone_id = 3;
}


message GetOccupancyGridRequest {
  // ID of the map to retrieve the occupancy grid from.
  uint64 map_id = 1;

  // ID of the occupancy grid layer.
  uint64 layer_id = 2;
}

